@{
    Layout = null;
    var title = ViewData["Title"] as string ?? "Employee App";
}
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>@title</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
  <style>
    .page-container { max-width: 960px; margin: 32px auto; }
  </style>
 
</head>

<body>
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
      <div class="container">
          <a class="navbar-brand" asp-controller="Employees" asp-action="Index">Employees</a>
      </div>
  </nav>
  <main class="page-container">
      @RenderBody()
  </main>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
(function () {
  function reportFail(payload) {
    try {
      const body = JSON.stringify(payload);
      if (navigator.sendBeacon) {
        navigator.sendBeacon("/ui-events/navigation-failed", new Blob([body], { type: "application/json" }));
      } else {
        fetch("/ui-events/navigation-failed", { method: "POST", headers: { "Content-Type": "application/json" }, body });
      }
    } catch (_) { }
  }

  document.addEventListener("click", function (e) {
    const el = e.target.closest("[data-nav-check]");
    if (!el) return;

    const href = el.getAttribute("href") || "";
    const component = el.getAttribute("data-nav-check") || "UnknownButton";
    const clickedAt = Date.now();
    let navigated = false;
    let tId = null;

    function markNavigated() {
      navigated = true;
      if (tId) clearTimeout(tId);
      window.removeEventListener("beforeunload", markNavigated, { capture: true });
      document.removeEventListener("visibilitychange", onVisChange, { capture: true });
    }
    function onVisChange() { if (document.visibilityState === "hidden") markNavigated(); }

    window.addEventListener("beforeunload", markNavigated, { capture: true });
    document.addEventListener("visibilitychange", onVisChange, { capture: true });

    tId = setTimeout(function () {
      if (navigated) return;
      reportFail({
        component,
        href,
        location: window.location.pathname,
        extra: JSON.stringify({ id: el.id || null, classes: el.className || null, elapsedMs: Date.now() - clickedAt })
      });
    }, 1500);
  });
})();
</script>

  @RenderSection("Scripts", required: false)
  
</body>
</html>
